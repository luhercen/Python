#!usr/bin/env python
# -*- coding: utf-8 -*-
""" Quick list iteration task """

import os
import hashlib
import base64

TASK_O1 = [603, 753, 745, 773, 250, 451, 728, 752, 464, 530, 984, 318, 36, 996,
           879, 849, 988, 785, 563, 904, 621, 705, 551, 963, 114, 471, 276, 248,
           396, 611, 914, 979, 198, 45, 455, 803, 647, 41, 558, 294, 243, 818,
           384, 747, 992, 662, 500, 672, 902, 544, 828, 63, 367, 559, 258, 917,
           523, 64, 166, 304, 0, 466, 380, 840, 529, 251, 995, 481, 816, 104,
           960, 874, 888, 261, 271, 989, 433, 891, 981, 581, 978, 475, 333, 604,
           256, 461, 313, 627, 575, 432, 132, 597, 309, 424, 2, 533, 717, 156,
           473, 148, 210, 552, 855, 997, 13, 813, 115, 86, 441, 617, 126, 607,
           720, 876, 565, 157, 830, 129, 200, 677, 128, 320, 301, 594, 369, 330,
           19, 476, 668, 540, 351, 707, 153, 609, 674, 793, 702, 162, 676, 556,
           913, 846, 822, 982, 55, 205, 6, 861, 382, 550, 614, 121, 710, 124,
           506, 412, 312, 391, 1, 458, 977, 171, 926, 779, 986, 265, 732, 505,
           101, 900, 591, 521, 81, 141, 606, 117, 761, 787, 234, 311, 488, 241,
           554, 136, 185, 203, 487, 504, 872, 73, 29, 407, 764, 987, 542, 638,
           491, 429, 236, 890, 916, 537, 201, 479, 348, 742, 278, 966, 111, 233,
           443, 54, 138, 503, 870, 378, 343, 327, 438, 414, 302, 246, 709, 823,
           474, 766, 810, 612, 671, 112, 536, 693, 16, 89, 70, 410, 790, 827,
           442, 682, 951, 744, 526, 462, 338, 675, 688, 456, 955, 583, 415, 750,
           587, 632, 20, 944, 486, 168, 898, 923, 131, 450, 757, 543, 211, 472,
           829, 75, 12, 237, 643, 416, 231, 691, 918, 78, 878, 765, 666, 293, 9,
           692, 875, 616, 425, 703, 694, 723, 767, 741, 866, 930, 206, 180, 66,
           629, 346, 925, 257, 381, 282, 640, 624, 43, 216, 263, 572, 994, 778,
           306, 212, 370, 569, 670, 580, 213, 3410, 714, 459, 417, 15, 49, 781,
           169, 11, 196, 802, 400, 842, 149, 896, 924, 324, 79, 937, 25, 103,
           72, 181, 356, 404, 434, 482, 645, 154, 968, 534, 593, 239, 224, 387,
           493, 363, 653, 795, 869, 420, 266, 436, 371, 108, 229, 279, 548, 687,
           905, 353, 368, 83, 467, 273, 143, 44, 719, 238, 445, 655, 751, 477,
           983, 704, 915, 468, 144, 826, 912, 69, 139, 223, 408, 254, 667, 952,
           135, 10, 799, 845, 957, 354, 119, 928, 737, 880, 65, 470, 975, 841,
           499, 151, 755, 679, 247, 252, 191, 35, 339, 511, 355, 165, 639, 435,
           42, 27, 873, 74, 413, 465, 877, 163, 933, 385, 886, 34, 754, 882,
           929, 411, 864, 123, 889, 588, 275, 585, 832, 690, 321, 809, 329, 850,
           794, 292, 23, 815, 289, 17, 725, 130, 894, 437, 959, 508, 524, 197,
           953, 641, 663, 777, 68, 615, 322, 440, 207, 116, 553, 347, 729, 735,
           991, 228, 541, 854, 651, 315, 342, 22, 733, 99, 970, 242, 430, 922,
           264, 756, 774, 956, 863, 192, 868, 308, 328, 661, 58, 225, 648, 18,
           48, 47, 485, 976, 590, 788, 859, 998, 512, 664, 965, 931, 179, 3,
           146, 546, 535, 365, 656, 649, 601, 497, 600, 658, 76777, 786, 557,
           480, 222, 501, 283, 619, 772, 560, 230, 644, 331, 262, 820, 598, 133,
           393, 345, 862, 579, 253, 449, 94, 673, 296, 360, 305, 428, 800,
           94366666, 684, 176, 567, 654, 125, 578, 934, 814, 509, 118, 906, 447,
           748, 762, 834, 940, 317, 337, 892, 625, 513, 38, 281, 586, 5257, 993,
           730, 836, 204, 749, 577, 620, 187, 235, 539, 285, 395, 700, 789, 453,
           947, 48900, 496, 801, 316, 134, 398, 272, 107, 172, 323, 760, 946,
           219, 495, 452, 839, 768, 96, 30, 88, 545, 67, 853, 743, 974, 59, 507,
           189, 948, 37, 547, 362, 908, 812, 357, 515, 335, 727, 514, 33, 659,
           71, 631, 53, 120, 372, 573, 484, 618, 538, 807, 397, 102, 775, 127,
           628, 941, 899, 961, 746, 457, 739, 945, 140, 858, 344, 319, 267, 734,
           920, 145, 783, 740, 427, 269, 21, 942, 32, 954, 287, 819, 847, 173,
           883, 844, 884, 218, 708, 490, 39, 295, 685, 82, 284, 939, 220, 377,
           60, 958, 274, 758, 635, 303, 821, 857, 999, 245, 833, 731, 364, 260,
           418, 26, 7, 300, 46, 589, 652, 90, 562, 759, 137, 147, 492, 106, 895,
           240, 837, 98, 399, 865, 602, 421, 636, 949, 184, 202, 596, 77, 14,
           164, 887, 950, 969, 798, 314, 110, 286, 255, 804, 5, 713, 592, 860,
           510, 174, 771, 701, 158, 919, 622, 178, 522, 686, 613, 811, 448, 91,
           911, 208, 122, 907, 722, 582, 498, 288, 280, 646, 359, 232, 446, 100,
           927, 175, 642, 297, 935, 244, 967, 190, 426, 277, 681, 808, 194, 825,
           856, 350, 971, 270, 776, 531, 843, 375, 791, 936, 782, 249, 650, 683,
           152, 193, 307, 848, 517, 28, 561, 605, 483, 696, 678, 409, 806, 113,
           726, 715, 389, 910, 226, 698, 177, 770, 142, 932, 373, 824, 851, 633,
           867, 221, 527, 401, 921, 574, 724, 167, 835, 494, 227, 712, 109, 422,
           568, 985, 738, 290, 699, 634, 972, 909, 170, 31, 394, 444, 349, 626,
           161, 325, 376, 805, 159, 769, 852, 352, 214, 566, 469, 24, 903, 188,
           660, 454, 595, 40, 711, 518, 763, 85000, 584, 95, 93, 334, 784, 386,
           831, 8, 183, 780, 669, 336, 402, 56, 962, 80, 901, 374, 182, 564, 50,
           326, 105, 610, 689, 298, 576, 406, 439, 310, 52, 97, 431, 57, 62,
           980, 599, 630, 478, 259, 665, 299, 706, 4, 736, 366, 92, 358, 463,
           383, 881, 150, 528, 716, 87, 938, 721, 419, 155, 84, 186, 796, 379,
           838, 519, 885, 623, 423, 2919999, 61, 697, 817, 657, 990, 332, 637,
           215, 718, 532, 217, 549, 973, 695, 392, 405, 2345287685, 160, 209,
           893, 460, 516, 51, 403, 570, 964, 340, 502, 199, 571, 361, 608,
           390423542, 680, 797, 555, 268, 897, 871, 792, 195, 388]

PASSWD = [
    'root:SKzYTp7qhvTMCti4RBYXmxuh9tM=:0:0:root:/home/root',
    'jlawrence:dK6XC5q3p0CiTu38lRZAQHZSYdU=:1:1:Jill Lawrence:/home/jlawrence',
    'kupton:5dv7OOMRrsxknm2xAqtvr+qntjU=:2:2:Kassie Upton:/home/kupton',
    'wsmith:A8YV4obgxalP8m66RcsF7G3U8i0=:3:3:William Smith:/home/wsmith',
    'thanks:8+tnUz57hYqUjqJMEYV/R8Cc5ro=:4:4:Timmothy Hanks:/home/thanks',
    'kdunst:rT6ckhLWyGhA97pj9DjxgMFuScA=:5:5:Kendra Dunst:/home/kdunst',
    'rrihanna:+je77MFtKm3SsQB2c9fOlxtve5E=:6:6:Ronda Rihanna:/home/rrihanna',
    'kwest:w7baBc2c43rRP3qhkqT386muBng=:7:7:Kent West:/home/kwest',
    'rdowney:ckRzvUxfMC2KC4ENIyRRSiC1eZQ=:8:8:Roger Downey:/home/rdowney',
    'djohnson:U65vuL+pKhT0ZvNfWfDgBVT1lds=:9:9:Donny Johnson:/home/djohnson',
]


def crypt(password, salt):
    """
    Helper function that simulates the cryptographic password functions
    of a Linux/Unix operating system

    :param password:
    :param salt:
    :return:
    """
    hashed = base64.b64encode(hashlib.sha1(salt + password).digest())
    return hashed


def load_words():
    """
    This is a helper function for loading the password dictionary
    words from a data file.

    :return:
    """
    my_path = os.path.dirname(os.path.realpath(__file__))
    words = []
    with open(os.path.join(my_path, 'words')) as word_dictionary:
        for line in word_dictionary:
            words.append(line.strip())
    return words


WORDS = load_words()
